---
engine: knitr
---

# Python essentials {#sec-python-essentials}

**Prerequisites**


**Key concepts and skills**


**Software and packages**

- `Python` [@python]
- `uv`
- `polars`

## Introduction

`Python` is a general-purpose programming language created by Guido van Rossum. `Python` version 0.9.0 was released in February 1991, and the current version, 3.13, was released in October 2024. It was named `Python` after *Monty Python's Flying Circus*. 

`Python` is a popular language in machine learning, but it was designed, and is more commonly used, for more general software applications. This means that we will especially rely on packages when we use Python for data science. This use of `Python` in this book is focused on data science, rather than the other, more general, uses for which it was developed.

Knowing `R` will allow you to pick up `Python` for data science quickly. The main data science packages share the need to solve the same underlying problems.

## Python, VS Code, and uv

We could use `Python` within RStudio, but it makes sense to use what is used by the community more broadly, which is VS Code. You can download VS Code for free [here](https://code.visualstudio.com) and then install it. If you have difficulties with this, then in the same way we started with Posit Cloud and the shifted to our local machine, you could initially use Google Colab [here](https://colab.google).

Open VS Code, and open a new Terminal to install `uv`, which is a Python package manager, analogous to CRAN: `curl -LsSf https://astral.sh/uv/install.sh | sh`.

Then we can use `uv` in that Terminal to install Python: `uv python install`.

## Getting started

We are going to get started with an example that downloads some data from Open Data Toronto. To start, we need to create a project, which will allow all our code to be self-contained. 

Open VS Code and open a new Terminal: "Terminal" -> "New Terminal". Then use Unix shell commands to navigate to where you want to create your folder. For instance, use `ls` to list all the folders in the current directory, then move to one using `cd` and then the name of the folder. If you need to go back one level then use `..`. 

Once you are happy with where you are going to create this new folder, we can use `uv init` in the Terminal to do this, pressing "return/enter" afterwards (`cd` then moves to the new folder "shelter_usage").

```{bash}
#| eval: false
#| echo: true

uv init shelter_usage
cd shelter_usage
```

By default, there will be a script in the example folder. We want to use `uv run` to run that script, which will then create an project environment for us.

```{bash}
#| eval: false
#| echo: true

uv run hello.py
```

A project environment is specific to that project. We will use the package `numpy` to simulate data. We need to add this package to our environment with `uv add`.

```{bash}
#| eval: false
#| echo: true

uv add numpy
```

We can then modify `hello.py` to use `numpy` to simulate from the Normal distribution.

```{python}
#| eval: false
#| echo: true
#| warning: false
#| message: false

import numpy as np

def main():
    np.random.seed(854)

    mu, sigma = 0, 1
    sample_sizes = [10, 100, 1000, 10000]
    differences = []

    for size in sample_sizes:
        sample = np.random.normal(mu, sigma, size)
        sample_mean = np.mean(sample)
        diff = abs(mu - sample_mean)
        differences.append(diff)
        print(f"Sample size: {size}")
        print(f"  Difference between sample and population mean: {round(diff, 3)}")
        
if __name__ == "__main__":
    main()
```

After we have modified and saved `hello.py` we can run it with `uv run` in exactly the same way as before.

Write tests

Download data

Apply tests

Manipulate the data

Make a graph

Add it all into Quarto





## Manipulating data

```{python}
#| eval: false
#| echo: true
#| warning: false
#| message: false

import polars as pl
```


## Making graphs

```{python}
#| eval: false
#| echo: true
#| warning: false
#| message: false

import matplotlib.pyplot as plt
```


## Exercises

### Practice {.unnumbered}

Free Replit "100 Days of Code" Python [course](https://replit.com/learn/100-days-of-python).

### Quiz {.unnumbered}


### Task {.unnumbered}

